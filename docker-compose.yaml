version: '3'
services:
  reputationpg:
    restart: always
    image: 'postgres:latest'
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    networks:
      - my_network

  api:
    build:
      context: ./FastAPI
      dockerfile: Dockerfile
    command: sh -c "uvicorn app:app --host 0.0.0.0 --port 8000 --forwarded-allow-ips='*' --proxy-headers --reload"
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      API_SECRET: ${API_SECRET}
      REFRESH_SECRET: ${REFRESH_SECRET}
    restart: always
    depends_on:
      - reputationpg
    networks:
      - my_network

  client:
    build:
      context: ./React
      dockerfile: Dockerfile
    depends_on:
      - api
    networks:
      - my_network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfiile_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    depends_on:
      - api
      - client
    volumes:
      - ./data/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    networks:
      - my_network

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    depends_on:
      - nginx
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - my_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres:


networks:
  my_network:
